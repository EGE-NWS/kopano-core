#!/usr/bin/perl
# A filter which takes a list of function heads and converts them to
# DEF_ macros.

use strict;
use warnings;

while (<>) {
	chomp;
	my($type, $tracing, $stdcall, $class, $intf, $method, $par) =
		m{^(ULONG|HRESULT)([01]?)(\s+__stdcall)?\s+(\w+)::x(\w+)::(\w+)\((.*)\)};
	if (!defined($par)) {
		print "$_\n";
		next;
	}
	if ($type eq "HRESULT") {
		print "DEF_HRMETHOD";
	} else {
		print "DEF_${type}METHOD";
	}
	if ($tracing eq "") {
		print "1(TRACE_MAPI, "; # )
	} elsif ($tracing eq "0") {
		print "0("; # )
	}
	print "$class, $intf, $method";
	if ($par eq "void" || $par eq "") {
		print ", (void))\n";
		next;
	}

	my @par = split /\s*,\s*/, $par;
	for (my $i = 0; $i < scalar(@par); ++$i) {
		my($name) = ($par[$i] =~ m{(\w+)$});
		$par[$i] = substr($par[$i], 0, -length($name));
		$par[$i] =~ s{\s+$}{}gs;
		print ", ($par[$i], $name)";
	}
	print ")\n";
}
